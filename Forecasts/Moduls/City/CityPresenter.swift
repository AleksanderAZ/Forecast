//
//  CityPresenter.swift
//  Forecasts
//
//  Created Z on 11/5/19.
//  Copyright © 2019 Zyma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CityPresenter: CityPresenterProtocol {
   
    weak private var view: CityViewProtocol?
    var interactor: CityInteractorProtocol?
    private let router: CityWireframeProtocol

    init(interface: CityViewProtocol, interactor: CityInteractorProtocol?, router: CityWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func checkStart() {
        guard countIsEmpty() else {  self.update(); return }
        let cityDef = CitysData.shared.getUserDef()
        if cityDef.count > 0 {
            for item in cityDef {
                self.addCity(citySearch: item)
            }
        }
        else {
            showSearchCityView()
        }
    }
    
    func countIsEmpty()->Bool {
        return countCell() == 0
    }
    
    func countCell()->Int {
        return CitysData.shared.citys.count
    }
    
    func showSearchCityView() {
        router.showSearchCityView()
    }
    
    func closeView(index: Int) {
        CitysData.shared.saveUserDef(save: CitysData.shared.citys)
        router.closeView(city: CitysData.shared.citys[index])
    }
    
    func addCity(citySearch: CitySearchModel?) {
        self.interactor?.addCity(citySearch: citySearch)
    }
    
    func refreshTempr() {
        self.interactor?.refreshTempr()
    }
    
    func getNameCity(index: Int)->String {
        return CitysData.shared.citys[index].city.cityName
    }
    
    func getTemprCity(index: Int)->String {
        return CitysData.shared.citys[index].temp
    }
    
    func deleteCity(index: Int) {
        self.interactor?.deleteCity(index: index)
        self.view?.update()
    }
    
    func update() {
         self.view?.update()
    }
}
