//
//  SearchCityViewController.swift
//  Forecasts
//
//  Created Z on 11/6/19.
//  Copyright © 2019 Zyma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SearchCityViewController: UIViewController, SearchCityViewProtocol {

	var presenter: SearchCityPresenterProtocol?
    let cellIdentifier = "SearchCity"
    
    weak var delegate: CityDelegate?
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var cityTable: UITableView!
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.cornerRadiusAll()
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        
        searchBar.becomeFirstResponder()
        
        cityTable.delegate = self
        cityTable.dataSource = self
        searchBar.delegate = self
        
        cityTable.register(UINib(nibName: cellIdentifier, bundle: nil), forCellReuseIdentifier: cellIdentifier)
        
        cityTable.rowHeight = UITableView.automaticDimension
        cityTable.tableFooterView = UIView(frame: .zero)
    }
    
    func update() {
        DispatchQueue.main.async {
            self.cityTable.reloadData()
        }
    }
    
}

extension SearchCityViewController: UISearchBarDelegate {
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        self.presenter?.closeView(citySearch: nil)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
       getSearch(textSearchBar: searchBar.text)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        getSearch(textSearchBar: searchBar.text)
    }
    
    private func getSearch(textSearchBar: String?) {
        if let textSearch = textSearchBar, textSearch.count > 2 {
            self.presenter?.searchData(searchStr: textSearch)
        }
        else {
            self.presenter?.searchDataEmpty()
        }
    }
}

extension SearchCityViewController:  UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let count = presenter?.countCell() ?? 0
        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)
        if let cell = cell as? SearchCity {
            cell.nameCity.text = self.presenter?.getNameCity(index: indexPath.row)
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let city = presenter?.getCity(index: indexPath.row) else { return }
        presenter?.closeView(citySearch: city)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

}
